import streamlit as st
from pathlib import Path
import google.generativeai as genai
from google.api_core import exceptions
import time
import random
import pandas as pd
from api_key import api_key
import markdown
import base64
from io import BytesIO
import html2text

# ReportLab imports
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
import re

# Initialize session state variables if they don't exist
if 'analysis_complete' not in st.session_state:
    st.session_state.analysis_complete = False
if 'response_text' not in st.session_state:
    st.session_state.response_text = None
if 'uploaded_image' not in st.session_state:
    st.session_state.uploaded_image = None
if 'sections' not in st.session_state:
    st.session_state.sections = {}

# Configure rate limit handling
MAX_RETRIES = 3
BASE_DELAY = 2  # Base delay in seconds

def generate_content_with_retry(model, prompt_parts):
    for attempt in range(MAX_RETRIES):
        try:
            with st.spinner('Analyzing image...'):
                response = model.generate_content(prompt_parts)
            return response
        except exceptions.ResourceExhausted:
            # Exponential backoff with jitter
            delay = (BASE_DELAY * (2 ** attempt)) + random.uniform(0, 1)
            st.warning(f"Rate limit hit. Waiting {delay:.2f}s before retrying...")
            time.sleep(delay)
    
    st.error("Failed to generate content after multiple attempts.")
    return None

# Function to convert markdown to HTML
def md_to_html(md_text):
    html = markdown.markdown(md_text)
    
    # Add some basic styling with tighter margins
    styled_html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>HealthVision Analysis Report</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                line-height: 1.4;
                max-width: 800px;
                margin: 0 auto;
                padding: 15px;
                color: #333;
            }}
            h1 {{
                color: #2C3E50;
                border-bottom: 2px solid #3498DB;
                padding-bottom: 5px;
                margin-bottom: 15px;
                font-size: 1.5em;
            }}
            h2 {{
                color: #3498DB;
                border-bottom: 1px solid #3498DB;
                padding-bottom: 3px;
                margin-top: 15px;
                font-size: 1.2em;
            }}
            .footer {{
                margin-top: 20px;
                border-top: 1px solid #ddd;
                padding-top: 5px;
                font-size: 0.7em;
                color: #7F8C8D;
            }}
            .disclaimer {{
                margin-bottom: 10px;
                font-size: 0.8em;
                color: #E74C3C;
            }}
        </style>
    </head>
    <body>
        <h1>HealthVision Analysis Report</h1>
        <div class="disclaimer">
            <strong>⚠️ Disclaimer:</strong> This report provides preliminary analysis only. 
            Always consult with a qualified healthcare professional for medical advice and diagnosis.
        </div>
        {html}
        <div class="footer">
            Generated by HealthVision AI Medical Image Analysis
        </div>
    </body>
    </html>
    """
    return styled_html

# Function to create a PDF using ReportLab
def create_pdf_with_reportlab(md_text):
    # Convert markdown to HTML
    html_content = markdown.markdown(md_text)
    
    # Initialize PDF buffer
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter, topMargin=36, bottomMargin=36, leftMargin=36, rightMargin=36)
    styles = getSampleStyleSheet()
    
    # Create more compact custom styles
    styles.add(ParagraphStyle(name='Disclaimer', 
                             parent=styles['Normal'],
                             textColor=colors.red,
                             borderColor=colors.red,
                             borderWidth=1,
                             borderPadding=3,
                             backColor=colors.lightgrey,
                             spaceBefore=6,
                             spaceAfter=6,
                             fontSize=8))
    
    styles.add(ParagraphStyle(name='CompactHeading2',
                            parent=styles['Heading2'],
                            spaceBefore=10,
                            spaceAfter=6,
                            fontSize=12))
    
    styles.add(ParagraphStyle(name='CompactNormal',
                            parent=styles['Normal'],
                            spaceBefore=2,
                            spaceAfter=3,
                            fontSize=9))
    
    # Create the PDF content
    content = []
    
    # Add title
    title_style = styles["Title"]
    title_style.fontSize = 14
    content.append(Paragraph("HealthVision Analysis Report", title_style))
    content.append(Spacer(1, 8))
    
    # Add disclaimer
    disclaimer_text = "DISCLAIMER: This report provides preliminary analysis only. Always consult with a qualified healthcare professional for medical advice and diagnosis."
    content.append(Paragraph(disclaimer_text, styles["Disclaimer"]))
    content.append(Spacer(1, 8))
    
    # Process content based on markdown structure
    # Split by section headers (## Title)
    sections = md_text.split('## ')
    
    # Process the first part (intro text or first section without ##)
    if sections and sections[0].strip():
        intro_text = sections[0].replace('# HealthVision Analysis Report', '').strip()
        if intro_text:
            content.append(Paragraph(intro_text, styles["CompactNormal"]))
            content.append(Spacer(1, 6))
    
    # Process each section
    for section in sections[1:]:  # Skip the first element which is before any ## marker
        if section.strip():
            # Extract section title and content
            lines = section.strip().split('\n', 1)
            if len(lines) > 0:
                title = lines[0].strip()
                content.append(Paragraph(title, styles["CompactHeading2"]))
                content.append(Spacer(1, 4))
                
                if len(lines) > 1:
                    section_content = lines[1].strip()
                    paragraphs = section_content.split('\n\n')
                    for p in paragraphs:
                        if p.strip():
                            content.append(Paragraph(p.strip(), styles["CompactNormal"]))
                            content.append(Spacer(1, 3))
    
    # Add footer
    footer_style = ParagraphStyle(name='Footer', parent=styles['Normal'], fontSize=7, textColor=colors.gray)
    content.append(Spacer(1, 12))
    content.append(Paragraph("Generated by HealthVision AI Medical Image Analysis", footer_style))
    
    # Build the PDF
    doc.build(content)
    pdf_data = buffer.getvalue()
    buffer.close()
    
    return pdf_data

# Function to handle image analysis and store results in session state
def process_image(image_data):
    # Configure Gemini API
    genai.configure(api_key=api_key)
    
    generation_config = {
        "temperature": 1,
        "top_p": 0.95,
        "top_k": 0,
        "max_output_tokens": 8192,
    }
    
    safety_settings = [
        {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    ]
    
    # Modified system prompt with fewer sections
    system_prompt = """
    As a highly skilled medical practitioner specializing in image analysis, you are tasked with examining medical images for a renowned hospital. Your expertise is crucial in identifying any anomalies, diseases, or health issues that may be present in the images.
    
    Your Responsibilities include:
    
    1. Detailed Analysis: Thoroughly analyze each image, focusing on identifying any abnormal findings.
    2. Recommendations: Based on your analysis, suggest potential next steps, including further tests or treatments as applicable.
    
    Important Notes:
    
    1. Scope of Response: Only respond if the image pertains to human health issues.
    2. Clarity of Image: In cases where the image quality impedes clear analysis, note that certain aspects are 'Unable to be determined based on the provided image.'
    3. Disclaimer: Accompany your analysis with the disclaimer: "Consult with a Doctor before making any decisions."
    
    Please provide me an output response with these 2 headings:
    1. Detailed Analysis
    2. Recommendations
    """
    
    model = genai.GenerativeModel(
        model_name="gemini-1.5-flash",
        generation_config=generation_config,
        safety_settings=safety_settings
    )
    
    image_parts = [{"mime_type": "image/png", "data": image_data}]
    prompt_parts = [image_parts[0], system_prompt]
    
    response = generate_content_with_retry(model, prompt_parts)
    
    if response:
        # Store the response text in session state
        st.session_state.response_text = response.text
        
        # Parse the response text to separate sections
        sections = {
            "Detailed Analysis": "",
            "Recommendations": ""
        }
        
        current_section = None
        for line in response.text.split('\n'):
            if any(section in line for section in sections.keys()):
                for section in sections.keys():
                    if section in line:
                        current_section = section
                        break
            elif current_section:
                sections[current_section] += line + "\n"
        
        # Store sections in session state
        st.session_state.sections = sections
        
        # Mark analysis as complete
        st.session_state.analysis_complete = True
        
        return True
    
    return False

# Set page configuration with minimal padding
st.set_page_config(
    page_title="HealthVision",
    page_icon="🏥",
    layout="wide",
    initial_sidebar_state="collapsed"  # Start with sidebar collapsed for more space
)

# Tighter Custom CSS
st.markdown("""
    <style>
    .main-header {
        font-family: 'Helvetica Neue', sans-serif;
        color: #2C3E50;
        text-align: center;
        padding-bottom: 10px;
        border-bottom: 2px solid #3498DB;
        margin-bottom: 15px;
        font-size: 24px;
    }
    .subheader {
        color: #7F8C8D;
        text-align: center;
        font-style: italic;
        margin-bottom: 15px;
        font-size: 14px;
    }
    .disclaimer {
        margin-bottom: 5px;
        font-size: 12px;
    }
    .section-header {
        color: #3498DB;
        border-bottom: 1px solid #3498DB;
        padding-bottom: 5px;
        margin-top: 15px;
        margin-bottom: 10px;
        font-size: 18px;
    }
    .stButton>button {
        background-color: #3498DB;
        color: white;
        border-radius: 4px;
        padding: 8px 16px;
        font-weight: bold;
        border: none;
        width: 100%;
    }
    .stButton>button:hover {
        background-color: #2980B9;
    }
    /* Reduce padding in the main container */
    .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
    /* Make the expanders more compact */
    .streamlit-expanderHeader {
        font-size: 16px !important;
        padding: 0.5rem !important;
    }
    .streamlit-expanderContent {
        padding: 0.5rem !important;
    }
    /* Make metrics more compact */
    [data-testid="stMetricValue"] {
        font-size: 1rem !important;
    }
    [data-testid="stMetricLabel"] {
        font-size: 0.8rem !important;
    }
    /* No margin on top of columns */
    .row-widget.stHorizontal {
        margin-top: 0px !important;
    }
    /* Reduce padding in the sidebar */
    .css-1d391kg {
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
    /* Make the footer metrics smaller */
    .stMetric {
        padding: 0.5rem !important;
    }
    </style>
    """, unsafe_allow_html=True)

# Sidebar with more compact content
with st.sidebar:
    st.markdown("## About HealthVision")
    st.info("HealthVision uses AI to analyze medical images. For informational purposes only.", icon="ℹ️")
    
    st.markdown("### How to use")
    st.markdown("""
    1. Upload a medical image
    2. Click "Analyze Image"
    3. Review analysis
    """)
    
    st.markdown("### Supported: PNG, JPG, JPEG")
    st.markdown("---")
    st.markdown("©Andronico Nucum")

# More compact main content
st.markdown('<h1 class="main-header">🏥 HealthVision: AI Medical Image Analysis</h1>', unsafe_allow_html=True)
st.markdown('<p class="subheader">Upload a medical image for AI-assisted analysis</p>', unsafe_allow_html=True)

# Shorter disclaimer
st.markdown('<div class="disclaimer"><strong>⚠️</strong> For information only. Consult healthcare professionals for medical advice.</div>', unsafe_allow_html=True)

# Create two columns for layout with tight spacing
col1, col2 = st.columns([1, 1], gap="small")

with col1:
    st.markdown('<h3 class="section-header">Upload Image</h3>', unsafe_allow_html=True)
    uploaded_file = st.file_uploader("Upload medical image", type=["png", "jpg", "jpeg"], label_visibility="collapsed")
    
    if uploaded_file:
        # Store the uploaded file in session state
        if st.session_state.uploaded_image != uploaded_file.name:
            st.session_state.uploaded_image = uploaded_file.name
            st.session_state.analysis_complete = False
        
        st.image(uploaded_file, width=320, caption="Uploaded Image")
        submit_button = st.button("Analyze Image")
        
        if submit_button:
            # Process the image
            success = process_image(uploaded_file.getvalue())
            if not success:
                st.error("Failed to analyze the image. Please try again.")
    else:
        st.info("Upload a medical image", icon="📷")
        submit_button = st.button("Analyze Image", disabled=True)
        # Reset analysis state if no file is uploaded
        if st.session_state.uploaded_image is not None:
            st.session_state.uploaded_image = None
            st.session_state.analysis_complete = False
            st.session_state.response_text = None
            st.session_state.sections = {}

# Analysis output
with col2:
    st.markdown('<h3 class="section-header">Analysis Results</h3>', unsafe_allow_html=True)
    
    # Check if analysis is complete using session state
    if st.session_state.analysis_complete and st.session_state.response_text:
        # Display each section in a clean, formatted way
        for section, content in st.session_state.sections.items():
            with st.expander(f"{section}", expanded=True):
                st.markdown(content)
        
        # Prepare report content
        md_report = f"# HealthVision Analysis Report\n\n"
        for section, content in st.session_state.sections.items():
            md_report += f"## {section}\n{content}\n\n"
                    
        # Create HTML version
        html_report = md_to_html(md_report)
        
        # Create a more compact container for download buttons
        st.markdown('<div class="section-header">Download Report</div>', unsafe_allow_html=True)
        download_col1, download_col2, download_col3 = st.columns(3, gap="small")
        
        with download_col1:
            # Markdown download
            st.download_button(
                label="Markdown",
                data=md_report,
                file_name="healthvision_report.md",
                mime="text/markdown"
            )
        
        with download_col2:
            # HTML download
            st.download_button(
                label="HTML",
                data=html_report,
                file_name="healthvision_report.html",
                mime="text/html"
            )
        
        with download_col3:
            try:
                # Generate PDF using ReportLab
                pdf_data = create_pdf_with_reportlab(md_report)
                st.download_button(
                    label="PDF",
                    data=pdf_data,
                    file_name="healthvision_report.pdf",
                    mime="application/pdf"
                )
            except Exception as e:
                st.error(f"PDF error: {e}")
    else:
        st.info("Analysis results will appear here after processing.")

# More compact footer
st.markdown("---")
metrics_col1, metrics_col2, metrics_col3 = st.columns(3, gap="small")
with metrics_col1:
    st.metric("AI Model", "Gemini 1.5 Flash")
with metrics_col2:
    st.metric("Processing Time", "~5-10s")
with metrics_col3:
    st.metric("Accuracy", "Reference only")